"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Scope_1 = require("./api/Scope");
const InjectionToken_1 = require("./api/InjectionToken");
const Exception_1 = require("./Exception");
const DEFAULT_SCOPE = Scope_1.Scope.Singleton;
/*

# Composite design pattern:

         ┏━━━━━━━━━━━━━━━━━━┓
         ┃ AbstractInjector ┃
         ┗━━━━━━━━━━━━━━━━━━┛
                   ▲
                   ┃
          ┏━━━━━━━━┻━━━━━━━━┓
          ┃                 ┃
 ┏━━━━━━━━┻━━━━━┓   ┏━━━━━━━┻━━━━━━━┓
 ┃ RootInjector ┃   ┃ ChildInjector ┃
 ┗━━━━━━━━━━━━━━┛   ┗━━━━━━━━━━━━━━━┛
                            ▲
                            ┃
          ┏━━━━━━━━━━━━━━━━━┻━┳━━━━━━━━━━━━━━━━┓
 ┏━━━━━━━━┻━━━━━━━━┓ ┏━━━━━━━━┻━━━━━━┓ ┏━━━━━━━┻━━━━━━━┓
 ┃ FactoryInjector ┃ ┃ ClassInjector ┃ ┃ ValueInjector ┃
 ┗━━━━━━━━━━━━━━━━━┛ ┗━━━━━━━━━━━━━━━┛ ┗━━━━━━━━━━━━━━━┛
*/
class AbstractInjector {
    injectClass(Class, providedIn) {
        try {
            const args = this.resolveParametersToInject(Class, providedIn);
            return new Class(...args);
        }
        catch (error) {
            throw new Exception_1.Exception(`Could not inject "${Class.name}"`, error);
        }
    }
    injectFunction(fn, providedIn) {
        try {
            const args = this.resolveParametersToInject(fn, providedIn);
            return fn(...args);
        }
        catch (error) {
            throw new Exception_1.Exception(`Could not inject "${fn.name}"`, error);
        }
    }
    resolveParametersToInject(injectable, target) {
        const tokens = injectable.inject || [];
        return tokens.map(key => {
            switch (key) {
                case InjectionToken_1.TARGET_TOKEN:
                    return target;
                case InjectionToken_1.INJECTOR_TOKEN:
                    return this;
                default:
                    return this.resolveInternal(key, injectable);
            }
        });
    }
    provideValue(token, value) {
        return new ValueProvider(this, token, value);
    }
    provideClass(token, Class, scope = DEFAULT_SCOPE) {
        return new ClassProvider(this, token, scope, Class);
    }
    provideFactory(token, factory, scope = DEFAULT_SCOPE) {
        return new FactoryProvider(this, token, scope, factory);
    }
    resolve(token, target) {
        return this.resolveInternal(token, target);
    }
}
function isDisposable(maybeDisposable) {
    return maybeDisposable && maybeDisposable.dispose && typeof maybeDisposable.dispose === 'function';
}
class RootInjector extends AbstractInjector {
    resolveInternal(token) {
        throw new Error(`No provider found for "${token}"!.`);
    }
    dispose() {
        // noop, root injector cannot be disposed
    }
}
class ChildInjector extends AbstractInjector {
    constructor(parent, token, scope) {
        super();
        this.parent = parent;
        this.token = token;
        this.scope = scope;
        this.disposables = new Set();
        this.isDisposed = false;
    }
    injectClass(Class, providedIn) {
        this.throwIfDisposed(Class);
        return super.injectClass(Class, providedIn);
    }
    injectFunction(fn, providedIn) {
        this.throwIfDisposed(fn);
        return super.injectFunction(fn, providedIn);
    }
    resolve(token, target) {
        this.throwIfDisposed(token);
        return super.resolve(token, target);
    }
    throwIfDisposed(injectableOrToken) {
        if (this.isDisposed) {
            throw new Exception_1.Exception(`Injector is already disposed. Please don't use it anymore.${additionalErrorMessage()}`);
        }
        function additionalErrorMessage() {
            if (typeof injectableOrToken === 'function') {
                return ` Tried to inject "${injectableOrToken.name}".`;
            }
            else {
                return ` Tried to resolve "${injectableOrToken}".`;
            }
        }
    }
    dispose() {
        if (!this.isDisposed) {
            this.parent.dispose();
            this.isDisposed = true;
            this.disposables.forEach(disposable => disposable.dispose());
        }
    }
    resolveInternal(token, target) {
        if (token === this.token) {
            if (this.cached) {
                return this.cached.value;
            }
            else {
                const value = this.result(target);
                if (this.responsibleForDisposing && isDisposable(value)) {
                    this.disposables.add(value);
                }
                if (this.scope === Scope_1.Scope.Singleton) {
                    this.cached = { value };
                }
                return value;
            }
        }
        else {
            return this.parent.resolve(token, target);
        }
    }
}
class ValueProvider extends ChildInjector {
    constructor(parent, token, value) {
        super(parent, token, Scope_1.Scope.Transient);
        this.value = value;
        this.responsibleForDisposing = false;
    }
    result() {
        return this.value;
    }
}
class FactoryProvider extends ChildInjector {
    constructor(parent, token, scope, injectable) {
        super(parent, token, scope);
        this.injectable = injectable;
        this.responsibleForDisposing = true;
    }
    result(target) {
        return this.injectFunction(this.injectable, target);
    }
}
class ClassProvider extends ChildInjector {
    constructor(parent, token, scope, injectable) {
        super(parent, token, scope);
        this.injectable = injectable;
        this.responsibleForDisposing = true;
    }
    result(target) {
        return this.injectClass(this.injectable, target);
    }
}
exports.rootInjector = new RootInjector();
//# sourceMappingURL=InjectorImpl.js.map